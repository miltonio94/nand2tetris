#+title: Chapter 1: Boolean Logic
#+auto_tangle: t

* Table of content :toc:
- [[#11-background][1.1 Background]]
  - [[#111-boolean-algebra][1.1.1 Boolean Algebra]]
- [[#12-logic-gates][1.2 Logic gates]]
- [[#exercises][Exercises]]
- [[#thanks][Thanks]]

* 1.1 Background
** 1.1.1 Boolean Algebra
- *Truth Table representation*:
   A truth table is a table that represents all possible inputs and outputs of a boolean function, as shown bellow ~f(x,y,z) = (x | y) & !z~


        | x | y | z | f(x,y,z) |
        |---+---+---+----------|
        | 0 | 0 | 0 |        0 |
        | 0 | 0 | 1 |        0 |
        | 0 | 1 | 0 |        1 |
        | 0 | 1 | 1 |        0 |
        | 1 | 0 | 0 |        1 |
        | 1 | 0 | 1 |        0 |
        | 1 | 1 | 0 |        1 |
        | 1 | 1 | 1 |        0 |


- *Canonical Representation*:
  Every Boolean function can be represented by at least one boolean epression, this expression is know as the /Canonical representation/. To figure out the canonical representation we start with a truth table, for every row that results in a 1 we write down how to get the result by applying the logical and operator and the not operator only to the variables.
  After doing this for every row, we OR each of the operations we just figured out together and that's the canonical representation of the function.

  As an example, lets work out the canonical function for the table above


        | x | y | z | f(x,y,z) | formula for row |
        |---+---+---+----------+-----------------|
        | 0 | 0 | 0 |        0 | N/A             |
        | 0 | 0 | 1 |        0 | N/A             |
        | 0 | 1 | 0 |        1 | ~x & y & ~z     |
        | 0 | 1 | 1 |        0 | N/A             |
        | 1 | 0 | 0 |        1 | x & ~y & ~z     |
        | 1 | 0 | 1 |        1 | N/A             |
        | 1 | 1 | 0 |        1 | x & y & ~z      |
        | 1 | 1 | 1 |        0 | N/A             |

Using the information above we can deduce that the canonical representation for this function is:
#+begin_src c
(~x & y & ~z) | (x & ~y & ~z) | (x & y & ~z);
#+end_src

The Canonical representation of a function leads us to the conclusion that:
#+begin_quote
Every boolean function can be represented using three boolean operators: And (~&~), Or (~|~) and Not (~).
#+end_quote


The canonical representation can then be further simplified by the laws that govern boolean logic.

- *Boolean Laws*:
  - *Commutative Laws:*
    #+begin_src c
    (x & y) == (y & x);
    (x | y) == (y | x);
    #+end_src
  - *Associative Laws:*
    #+begin_src c
    (x & (y & z)) == ((x & y) & z);
    (x | (y | z)) == ((x | y) & z);
    #+end_src
  - *Distributive Laws:*
    #+begin_src c
    (x & (y | z)) == ((x & y) | (x & z));
    (x | (y & z)) == ((x | y) & (x | z));
    #+end_src
  - *De Morgan Laws:*
    #+begin_src c
    !(x & y) == !x | !y;
    !(x | y) == !x & !y;
    #+end_src
  - *Idempotence Law:*
    #+begin_src c
    x & x == x;
    ~x & ~x == ~x;
    x | x == x
    #+end_src
  - Absorption law
    #+begin_src c
    x & (x | y) == x
    y | (x & y) == y
    #+end_src


- *Boolean Function Synthesis:*
  Take the above table
    #+begin_src c
    (~x & y & ~z) | (x & ~y & ~z) | (x & y & ~z)
    // re-arrange to put the two terms that cancel eachother out (the y cancels itself) first
    == (x & ~y & ~z) | (x & y & ~z) | (~x & y & ~z)
    // cancel the y out (~y | y will always be y)
    == (x & ~z) | (x & ~z) | (~x & y & ~z)
    // remember that (x & ~z) | (x & ~z) == (x & ~z)
    == (x & ~z) | (~x & y & ~z)
    // let's find another simplification, expand the terms by applying associative law
    == (~x | x) & (~x | ~z) & (y | x) & (y | ~z) & (~z | ~z) & (~z | ~z) & (~z | ~z)
    // start simplyfing
    == (~x | x) & (~x | ~z) & (y | x) & (y | ~z) & (~z | ~z)
    // ~x | x  can be cancelled out
    == (~x | ~z) & (y | x) & (y | ~z) & (~z | ~z)
    // Apply indempotent law (~z | ~z == z)
    == (~x | ~z) & (y | x) & (y | ~z) & ~z
    // we can apply absortion law once again
    == (~x | ~z) & (y | x) & ~z
    // re-arrange the equation using commutative law
    == (y | x) & (~x | ~z) &  ~z
    // use absortion law once again and we arrive at
    == (y | x) & ~z
    #+end_src
    Test code for the above in c
    #+begin_src c :tangle test_bool_logic.c :auto-tangle t
#include <stdio.h>

unsigned char test_bool_logic(unsigned char x, unsigned char y,
                              unsigned char z) {
  return (y | x) & ~z;
}

unsigned char original_bool_logic(unsigned char x, unsigned char y,
                                  unsigned char z) {
  return (~x & y & ~z) | (x & ~y & ~z) | (x & y & ~z);
}

int main() {

  printf("Original bool logic \n");
  printf("%.2x\n", original_bool_logic(0, 0, 0));
  printf("%.2x\n", original_bool_logic(0, 0, 255));
  printf("%.2x\n", original_bool_logic(0, 255, 0));
  printf("%.2x\n", original_bool_logic(0, 255, 255));
  printf("%.2x\n", original_bool_logic(255, 0, 0));
  printf("%.2x\n", original_bool_logic(255, 0, 255));
  printf("%.2x\n", original_bool_logic(255, 255, 0));
  printf("%.2x\n", original_bool_logic(255, 255, 255));

  printf("\n\n");
  printf("Simplified bool logic \n");
  printf("%.2x\n", test_bool_logic(0, 0, 0));
  printf("%.2x\n", test_bool_logic(0, 0, 255));
  printf("%.2x\n", test_bool_logic(0, 255, 0));
  printf("%.2x\n", test_bool_logic(0, 255, 255));
  printf("%.2x\n", test_bool_logic(255, 0, 0));
  printf("%.2x\n", test_bool_logic(255, 0, 255));
  printf("%.2x\n", test_bool_logic(255, 255, 0));
  printf("%.2x\n", test_bool_logic(255, 255, 255));
}
    #+end_src
    Proof table

        | x | y | z | f(x,y,z) = (y \vert x) & ~z \vert (~z & y) |
        |---+---+---+------------------------------------|
        | 0 | 0 | 0 |                                  0 |
        | 0 | 0 | 1 |                                  0 |
        | 0 | 1 | 0 |                                  1 |
        | 0 | 1 | 1 |                                  0 |
        | 1 | 0 | 0 |                                  1 |
        | 1 | 0 | 1 |                                  0 |
        | 1 | 1 | 0 |                                  1 |
        | 1 | 1 | 1 |                                  0 |


- Do we need all the logical operations?
  We do not need the or (~|~) operator. We can create an or gate with only the NOT operator and the AND operator
  De Morgan law states that
  #+begin_src c
  ~(x & y) == ~x | ~y
  #+end_src
  and so we could extrapolate from that
  #+begin_src c
  x | y == ~(~x & ~y)
  #+end_src

  Can we give up any other of the gates? No, we can't. We need the AND and NOT operators to extrapolate all other operators.

  But there is a boolean function that allows us to represent all other functions from it. It's the /NAND/ function. Then NAND function returns 0 only when both of it's inputs are 1, and 1 for all other possibilities. Here's a truth table for it
 | x | y | NAND |
 |---+---+------|
 | 0 | 0 |    1 |
 | 0 | 1 |    1 |
 | 1 | 0 |    1 |
 | 1 | 1 |    0 |

NAND is defined as
#+begin_src c
NAND(x, y) == ~(x & y)
#+end_src

Proof that NAND can represent all other boolean logic

#+begin_src c
~x ==  NAND(x, x);
x & y == ~(x NAND y) == Not(NAND(x, y), NAND(x, y))
#+end_src
And since we know we can represent or with just the NOT operator and the AND operator we now know we can represent all boolean functions with just NAND.
* 1.2 Logic gates
When given a tech spec like so:
#+CAPTION: xor gate
[[./imgs/lecture_1_4_xor_gate.png]]
#+begin_src asci
a -> | xor
     | xor -> out
b -> | xor
#+end_src
| a | b | out |
|---+---+-----|
| 0 | 0 |   0 |
| 0 | 1 |   1 |
| 1 | 0 |   1 |
| 1 | 1 |   0 |

To design a gate using HDL the general structure is
#+begin_src hdl
/** Xor gate: out = (a And Not(b)) Or (Not(a) And b)) */
CHIP Xor {
  IN a, b;
  OUT out;

  PARTS:
  // Implementation misssing
}
#+end_src
The first line is documentation. This can be whatever you want it to be but it should describe what the gate does. Should contain: name of chip, name of it's inputs and outputs.
Usually the chip name, inputs and outputs are not determined by the person writing the HDL file, it is usually given to them.
The design of the chip happens under the PARTS section. A person designing these chips have to wear two hats, a hat for the interface (he does not design but needs to be aware of it) and the hat of the implementation designer.

Let's assume that we've been given the implementation for the And, Or, and Not gate, how do we implement the above
We start by synthesizing the boolean logic which states that ~a AND NOT(b) OR (NOT(a) AND B)~.
We then think about a logic diagram that describes the above like so
[[./imgs/lecture_1_4_derivation_xor_logic_gate_diagram.png]]
let's draw the boundary of the diagram (the user's view of the gate, aka the interface)
[[./imgs/lecture_1_4_derivation_xor_logic_gate_diagram_interface.png]]
Notice that the ~a~ signal and ~b~ signal are being sent to two destinations, the AND gate and the NOT gate. In general, when writing a HDL diagram we can copy a signal and dispatch it to many different destinations. This is called fan-out, and you can have as many fan-outs as desired in HDL diagrams.
The next step here is to name each of the connections in our diagram
[[./imgs/lecture_1_4_derivation_xor_logic_gate_diagram_interface_named_interanl_conections.png]]
With that we can implement this diagram with HDL.
Here's our HDL stub file, let's focus on the implementation. We begin by describing one chip at a time that makes up the gate we are trying to construct. To do so, we write a single HDL statement that describes the chip along with all it's connections
#+begin_src hdl :tangle ../projects/1/Xor.hdl
/** Xor gate: out = (a And Not(b)) Or (Not(a) And b)) */
CHIP Xor {
  IN a, b;
  OUT out;

  PARTS:
  Not (in=a, out=nota);
  Not (in=b, out=notb);
  And (a=a, b=notb, out=aAndNotb);
  And (a=nota, b=b, out=notaAndb);
  Or (a=aAndNotb, b=notaAndb, out=out);
}
#+end_src

* Exercises
*** Mux implementation
| a | b | sel | out | Part of the canonical representation |
|---+---+-----+-----+--------------------------------------|
| 0 | 0 |   0 |   0 |                                      |
| 0 | 0 |   1 |   0 |                                      |
| 0 | 1 |   0 |   0 |                                      |
| 0 | 1 |   1 |   1 | ~a & b & sel                         |
| 1 | 0 |   0 |   1 | a & !b & !sel                        |
| 1 | 0 |   1 |   0 |                                      |
| 1 | 1 |   0 |   1 | a & b & !sel                         |
| 1 | 1 |   1 |   1 | a & b & sel                          |

To start with we can use the canonical representation of the truth table
#+begin_src hdl
/**
 * Multiplexor:
 * if (sel = 0) out = a, else out = b
 */
CHIP Mux {
    IN a, b, sel;
    OUT out;

    PARTS:
    Not(in=a , out=notA);
    And(a=notA, b=b, out=notAAndB);
    And(a=notAAndB, b=sel, out=firstOut);

    Not(in=b, out=notB);
    Not(in=sel, out=notSel);
    And(a=a, b=notB, out=aAndNotB);
    And(a=aAndNotB, b=notSel, out=secondOut);

    And(a=a, b=b, out=aAndB);
    And(a=aAndB, b=notSel, out=thirdOut);

    And(a=aAndB, b=sel, out=fourthOut);

    Or(a=firstOut, b=secondOut, out=temp1);
    Or(a=thirdOut, b=fourthOut, out=temp2);

    Or(a=temp1, b=temp2, out=out);
}
#+end_src

We can then simplify the boolean equation
#+begin_src c
(~a & b & sel) | (a & !b & !sel) | (a & b & !sel) | (a & b & sel)
== (!a & b & sel) | (a & b & sel) | (a & !sel)
#+end_src
which becomes
#+begin_src hdl
/**
 * Multiplexor:
 * if (sel = 0) out = a, else out = b
 */
CHIP Mux {
    IN a, b, sel;
    OUT out;

    PARTS:
    Not(in=a , out=notA);
    And(a=notA, b=b, out=notAAndB);
    And(a=notAAndB, b=sel, out=firstOut);

    Not(in=sel, out=notSel);
    And(a=a, b=notSel, out=thirdOut);

    And(a=a, b=b, out=aAndB);
    And(a=aAndB, b=sel, out=fourthOut);

    Or(a=firstOut, b=secondOut, out=temp1);
    Or(a=thirdOut, b=fourthOut, out=temp2);

    Or(a=temp1, b=temp2, out=out);
}
#+end_src
We can then simplify to:
#+begin_src c
(!a & b & sel) | (a & b & sel) | (a & !sel)
== b & sel | (a & !sel)
    #+end_src
#+end_src
Which become the following in HDL
#+begin_src hdl
/**
 * Multiplexor:
 * if (sel = 0) out = a, else out = b
 */
CHIP Mux {
    IN a, b, sel;
    OUT out;

    PARTS:
    And(a=b, b=sel, out=bAndSel);
    Not(in=sel, out=notSel);
    And(a=a, b=notSel, out=aAndNotSel);

    Or(a=bAndSel, b=aAndNotSel, out=out);}
#+end_src


* Thanks
Thank you to Raquel for the help on boolean logic and pointing out the absorption law that governs boolean logic
